package gpt

import (
	"bufio"
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"strings"
)

func chat(messages []map[string]string) <-chan string {
	url := "https://api.openai.com/v1/chat/completions"
	API_KEY := ""
	ch := make(chan string)

	fmt.Println("a call recieved")
	fmt.Println("Hello from chat:", messages)
	// Create the request data
	data := map[string]interface{}{
		"model":    "text-davinci-003", //"gpt-3.5-turbo",
		"messages": messages,
		"stream":   true,
	}

	jsonData, err := json.Marshal(data)
	if err != nil {
		fmt.Println(err)
		ch <- "sorry, error happened"
	}
	fmt.Println("Ready to call the API")
	// Create the request
	req, err := http.NewRequestWithContext(context.Background(), "POST", url, bytes.NewBuffer(jsonData))
	if err != nil {
		fmt.Println(err)
		ch <- "sorry, error happened"
		close(ch)
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("Authorization", "Bearer "+API_KEY)

	var answer string
	// Send the request
	client := &http.Client{}
	resp, err := client.Do(req)
	if err != nil {
		fmt.Println(err)
		ch <- "sorry, error happened"
		close(ch)
	}
	defer resp.Body.Close()
	scanner := bufio.NewScanner(resp.Body)
	for scanner.Scan() {
		line := scanner.Text()
		fmt.Println("line recieved:", line)
		if strings.HasPrefix(line, "data: ") {
			data := strings.TrimPrefix(line, "data: ")
			var result map[string]interface{}
			json.Unmarshal([]byte(data), &result)
			if result["choices"] != nil {
				x := result["choices"].([]interface{})[0].(map[string]interface{})["delta"].(map[string]interface{})["content"]
				if x != nil {
					str, ok := x.(string)
					if ok {
						ch <- strings.TrimLeft(str, "\n")
						answer += answer
						fmt.Print(strings.TrimLeft(str, "\n")) // remove the leading \n
					} else {
						ch <- "sorry, error happened"
						fmt.Println("x is not a string")
						close(ch)
					}
				}
			}
			if data == "[DONE]" {
				fmt.Println("\ndone")
				messages = append(messages, map[string]string{"role": "assistant", "content": answer})
				close(ch)
			}
			if err := scanner.Err(); err != nil {
				ch <- "sorry, error happened"
				fmt.Println("x is not a string")
				close(ch)
			}
		}
	}
	return ch
}
